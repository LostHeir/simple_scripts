"""
Play aroud with decorators..
"""
import functools
import time


def my_sqq(func):
    @functools.wraps(func)
    def wrapper(*args):
        print(func(*args) ** 2)
        return func(*args)
    return wrapper


def timer(func):
    """Print the runtime of the decorated function"""
    @functools.wraps(func)
    def wrapper_timer(*args, **kwargs):
        start_time = time.perf_counter()    # 1
        value = func(*args, **kwargs)
        end_time = time.perf_counter()      # 2
        run_time = end_time - start_time    # 3
        print(f"Finished {func.__name__!r} in {run_time:.4f} secs")
        return value
    return wrapper_timer


@my_sqq
def add(a: int, b: int) -> int:
    return a+b


@timer
def waste_some_time(num_times):
    for _ in range(num_times):
        sum([i**2 for i in range(10000)])


print(add(2, 4))
waste_some_time(100)
